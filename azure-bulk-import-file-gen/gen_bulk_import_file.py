import json
from operator import itemgetter
import argparse

def main():

  parser = argparse.ArgumentParser(description="Generate a Pulumi bulk import file from an Azure resources file.")
  parser.add_argument("-r", "--resources_file", help="Path to the Azure resources file generated using 'az resource list'", required=True)
  parser.add_argument("-o", "--output_file", help="Path to the output generated bulk file", required=True)
  parser.add_argument("-n", "--num_resources_per_file", type=int, help="Number of resources to put in each bulk-import file. (default=20)", default=20)

  args = parser.parse_args()

  # The azure_resources_file should be generated using az resource list --resource-group <resource_group> 
  azure_resources_file = args.resources_file

  # This is the bulk imoprt file that will be generated.
  bulk_import_file = args.output_file
  bulk_import_file_base = bulk_import_file.split('.')[0]

  # Number of resources to put in each bulk-import file.
  num_resources_per_file = args.num_resources_per_file

  # The type_mappings_file is predefined and contains a mapping of Azure resource types to the corresponding Pulumi types.
  # It could probably be generated by a script but for now just make sure it contains mappings for all the types in the azure_resources_file
  # being processed.
  type_mappings_file = 'type-mappings.json'

  # Load the azure resources json
  try:
      with open(azure_resources_file, 'r') as file:
          azure_resources = json.load(file)
          # Sort the resources by type.
          # This way the imported resources will be grouped by type in the generated code which should make it easier to refactor into loops or functions, etc.
          azure_resources = sorted(azure_resources, key=itemgetter('type'))
  except FileNotFoundError:
      print(f"Error: File, {azure_resources_file}, not found.")
  except json.JSONDecodeError:
      print(f"Error: Invalid JSON format in file, {azure_resources_file}.")
  except Exception as e:
      print(f"An unexpected error occurred while reading {azure_resources_file}: {e}")

  # Load the type mappings json
  try:
      with open(type_mappings_file, 'r') as file:
          type_mappings = json.load(file)
  except FileNotFoundError:
      print(f"Error: File, {type_mappings_file}, not found.")
  except json.JSONDecodeError:
      print(f"Error: Invalid JSON format in file, {type_mappings_file}.")
  except Exception as e:
      print(f"An unexpected error occurred while reading {type_mappings_file}: {e}")

  # Process the azure resources and build the bulk import file(s)
  bulk_resources = []
  num_resources_processed = 0
  for resource in azure_resources:
      resource_type = resource['type']
      if resource_type in type_mappings:
          # Build a given resource's bulk import object
          # See https://www.pulumi.com/docs/iac/adopting-pulumi/import/#bulk-import-operations for format
          pulumi_type = type_mappings[resource_type]
          pulumi_name = pulumi_type.split(':')[-1]
          azure_id = resource['id']
          # Add the resource to the bulk import array
          bulk_resource = {
              "type": pulumi_type,
              "name": pulumi_name,
              "id": azure_id
          }
          bulk_resources.append(bulk_resource)
          num_resources_processed += 1
          # If the number of resources processed is a multiple of num_resources_per_file, write the bulk import file  
          if num_resources_processed % num_resources_per_file == 0:
              write_bulk_import_file(bulk_resources, f"{bulk_import_file_base}_{num_resources_processed//num_resources_per_file}.json")
              bulk_resources = [] 
      else:
          print(f"Error: Resource, {resource['name']}: No Pulumi type found in {type_mappings_file} for Azure resource type: {resource_type}")

  # Write any remaining resources to the bulk import file
  if num_resources_processed % num_resources_per_file != 0:
      write_bulk_import_file(bulk_resources, f"{bulk_import_file_base}_{(num_resources_processed//num_resources_per_file)+1}.json")

# Write the bulk import file
def write_bulk_import_file(bulk_resources, bulk_import_file):
    bulk_resources = {
      "resources": bulk_resources
    }
    bulk_resources_formatted = json.dumps(bulk_resources, indent=4)
    try:
        with open(bulk_import_file, 'w') as file:
            file.write(bulk_resources_formatted)
    except Exception as e:
        print(f"An unexpected error occurred while writing {bulk_import_file}: {e}")
    else:
        print(f"Successfully wrote bulk import file to {bulk_import_file}.")


if __name__ == "__main__":
  main ()